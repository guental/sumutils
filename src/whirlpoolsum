#!/usr/bin/python3
# -*- coding: utf-8 -*- vim: et ts=4 sw=4
# whirlpoolsum: print or check WHIRLPOOL checksums
#
# Copyright (C) 2021 Guental, All Rights Reserved

from __future__ import print_function
import sys
sys.tracebacklimit = 0
import os, argparse, hashlib
from io import DEFAULT_BUFFER_SIZE as DEFAULT

sys.tracebacklimit = 0
APP = "whirlpoolsum"
CODE = 0
DEFAULT_LINE = DEFAULT * 8

def whirlpool_calc(FILENAME):
	hashsum = hashlib.new('whirlpool')
	with open(FILENAME, 'rb') as openfile:
		while True:
			DATA = openfile.read(DEFAULT)
			if not DATA:
				break
			hashsum.update(DATA)

		WHIRLPOOL = hashsum.hexdigest()
		return WHIRLPOOL

def whirlpool_make(FILENAME):
	WHIRLPOOL_HASH = whirlpool_calc(FILEPATH)
	if args.tag == True:
		print( "WHIRLPOOL (" + ARGNAME + ") =", WHIRLPOOL_HASH)
	else:
		print(WHIRLPOOL_HASH + '  ' + ARGNAME)

def whirlpool_check_type(DATA):
	FILE = DATA[:-133]
	FILE = FILE[11:]
	MARK = DATA[:-129]
	MARK = DATA[0:11] + MARK[-4:]
	HASH = DATA[-129:]
	HASH = HASH[:128]

	if FILE == '-':
		return False, HASH, FILE
	if MARK == "WHIRLPOOL () = ":
		return True, HASH, FILE

	else:
		MARK = DATA[128:]
		FILE = MARK[2:]
		FILE = FILE[:-1]
		MARK = MARK[:2]
		HASH = DATA[:128]

		if FILE == '-':
			return False, HASH, FILE
		if MARK == '  ':
			return True, HASH, FILE
		elif MARK == ' *':
			return True, HASH, FILE
		else:
			return False, HASH, FILE

def whirlpool_check_act(OLD, ARG):
	if os.path.isdir(ARG):
		print(APP + ":", ARG + ": Is a directory", file=sys.stderr)
		print (ARG + ": FAILED open or read")
		return False, False, True
	elif os.path.exists(ARG):
		try:
			with open(ARG) as F:
				FILEPATH = ARG
		except IOError:
			print(APP + ":", ARG + ": Permission denied", file=sys.stderr)
			print (ARG + ": FAILED open or read")
			return False, False, True
		NEW = whirlpool_calc(FILEPATH)
		if OLD == NEW:
			print(ARG + ": OK")
			return True, True, True
		else:
			print(ARG + ": FAILED")
			return False, True, False
	else:
		if args.ignore_missing == True:
			return True, True, True
		else:
			print (APP + ":", ARG + ": No such file or directory", file=sys.stderr)
			print (ARG + ": FAILED open or read")
			return False, False, True

def whirlpool_check(FILENAME, NAME):
	FUNCCODE = 0
	WARN = 0
	WARN_FILE = 0
	WARN_CHECK = 0
	try:
		with open(FILENAME, 'r') as openfile:
			while True:
				try:
					DATA = openfile.readline(DEFAULT_LINE)
					if not DATA:
						break
					
					SUM, HASH, FILE = whirlpool_check_type(DATA)
					if SUM == True:
						ALL, WARNOPEN, WARNFAIL = whirlpool_check_act(HASH, FILE)
						
						if WARNOPEN == False:
							WARN_FILE = WARN_FILE + 1
						if WARNFAIL == False:
							WARN_CHECK = WARN_CHECK + 1

						if ALL == True:
							continue
						else:
							FUNCCODE = 1
							continue
					else:
						WARN = WARN + 1
						continue

				except IndexError:
					continue

		if WARN > 1:
			print(APP + ": WARNING: " + str(WARN) + " lines are improperly formatted", file=sys.stderr)
		elif WARN == 1:
			print(APP + ": WARNING: 1 line is improperly formatted", file=sys.stderr)
		if WARN_FILE > 1:
			print(APP + ": WARNING: " + str(WARN_FILE) + " listed files could not be read", file=sys.stderr)
		elif WARN_FILE == 1:
			print(APP + ": WARNING: 1 listed file could not be read", file=sys.stderr)
		if WARN_CHECK > 1:
			print(APP + ": WARNING: " + str(WARN_CHECK) + " computed checksums did NOT match", file=sys.stderr)
		elif WARN_CHECK == 1:
			print(APP + ": WARNING: 1 computed checksum did NOT match", file=sys.stderr)
					
		if FUNCCODE == 0:
			return True
		else:
			return False

	except UnicodeDecodeError:
		return False

if __name__ == '__main__':
	try:
		parser = argparse.ArgumentParser(
				description='Print or check WHIRLPOOL (512-bit) checksums.')
		group_one = parser.add_mutually_exclusive_group()
		group_two = parser.add_mutually_exclusive_group()
		group_one.add_argument('-c', '--check', help='read WHIRLPOOL sums from the FILEs and check them', action="store_true", default=False)
		group_one.add_argument('--tag', help="create a BSD-style checksum", action="store_true", default=False)
		group_two.add_argument('--ignore-missing', help="don't fail or report status for missing files", action="store_true", default=False)

		parser.add_argument('FILE', action='store', nargs='*')
		args = parser.parse_args()

		STDIN = False
		if len(args.FILE) == 0:
			args.FILE = ['/dev/stdin']
			STDIN = True

		for ARG in args.FILE:
			if STDIN == True:
				ARGNAME = "-"
			else:
				ARGNAME = ARG
			if os.path.isdir(ARG):
				print(APP + ":", ARGNAME + ": Is a directory", file=sys.stderr)
				CODE = 1
			elif os.path.exists(ARG):
				try:
					with open(ARG) as F:
						FILEPATH = ARG
				except IOError:
					print(APP + ":", ARGNAME + ": Permission denied", file=sys.stderr)
					CODE = 1
					continue
				if args.check == False:
					whirlpool_make(FILEPATH)
				else:
					if not whirlpool_check(FILEPATH, ARG):
						CODE = 1
			else:
				print (APP + ":", ARGNAME + ": No such file or directory", file=sys.stderr)
				CODE = 1
	
	except KeyboardInterrupt:
		sys.stderr.close()
		print ('')
		sys.stdout.close()
		sys.exit(130)

sys.exit(CODE)
